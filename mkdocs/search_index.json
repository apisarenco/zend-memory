{
    "docs": [
        {
            "location": "/", 
            "text": "zend-serializer\n\n\n\n\n\n\nzend-serializer provides an adapter-based interface for generating and\nrecovering from storable representations of PHP types.\n\n\n\n\nFile issues at https://github.com/zendframework/zend-serializer/issues\n\n\nDocumentation is at https://zendframework.github.io/zend-serializer/", 
            "title": "Home"
        }, 
        {
            "location": "/#zend-serializer", 
            "text": "zend-serializer provides an adapter-based interface for generating and\nrecovering from storable representations of PHP types.   File issues at https://github.com/zendframework/zend-serializer/issues  Documentation is at https://zendframework.github.io/zend-serializer/", 
            "title": "zend-serializer"
        }, 
        {
            "location": "/intro/", 
            "text": "Introduction\n\n\nzend-serialzier provides an adapter-based interface for serializing and\ndeserializing PHP types to and from different representations.\n\n\nFor more information what a serializer is read the wikipedia page of\n\nSerialization\n.\n\n\nQuick Start\n\n\nSerializing adapters can either be created from the provided\n\nZend\\Serializer\\Serializer::factory\n method, or by instantiating one of the\n\nZend\\Serializer\\Adapter\\*\n classes.\n\n\nuse Zend\\Serializer\\Adapter;\nuse Zend\\Serializer\\Exception;\nuse Zend\\Serializer\\Serializer;\n\n// Via factory:\n$serializer = Serializer::factory(Adapter\\PhpSerialize::class);\n\n// Alternately:\n$serializer = new Adapter\\PhpSerialize();\n\n// Now $serializer is an instance of Zend\\Serializer\\Adapter\\AdapterInterface,\n// specifically Zend\\Serializer\\Adapter\\PhpSerialize\n\ntry {\n    $serialized = $serializer-\nserialize($data);\n    // now $serialized is a string\n\n    $unserialized = $serializer-\nunserialize($serialized);\n    // now $data == $unserialized\n} catch (Exception\\ExceptionInterface $e) {\n    echo $e;\n}\n\n\n\n\nThe method \nserialize()\n generates a storable string. To regenerate this\nserialized data, call the method \nunserialize()\n.\n\n\nAny time an error is encountered serializing or unserializing, the adapter will\nthrow a \nZend\\Serializer\\Exception\\ExceptionInterface\n.\n\n\nBecause an application often uses only one serializer internally, it is possible\nto define and use a default serializer. That serializer will be used by default\nby other components like \nZend\\Cache\\Storage\\Plugin\\Serializer\n.\n\n\nTo define and use the default serializer, use the static serialization methods\nof the basic \nZend\\Serializer\\Serializer\n:\n\n\nuse Zend\\Serializer\\Adapter;\nuse Zend\\Serializer\\Exception;\nuse Zend\\Serializer\\Serializer;\n\nSerializer::setDefaultAdapter(Adapter\\PhpSerialize::class);\n\ntry {\n    $serialized = Serializer::serialize($data);\n    // now $serialized is a string\n\n    $unserialized = Serializer::unserialize($serialized);\n    // now $data == $unserialized\n} catch (Exception\\ExceptionInterface $e) {\n    echo $e;\n}\n\n\n\n\nBasic configuration Options\n\n\nTo configure a serializer adapter, you can optionally use an instance of\n\nZend\\Serializer\\Adapter\\AdapterOptions\n, an instance of one of the adapter\nspecific options class, an \narray\n, or a \nTraversable\n object. The adapter\nwill convert it into the adapter specific options class instance (if present) or\ninto the basic \nZend\\Serializer\\Adapter\\AdapterOptions\n class instance.\n\n\nOptions can be passed as the second argument to the provided\n\nZend\\Serializer\\Serializer::factory\n and \n::setDefaultAdapter\n methods, via the\nadapter's \nsetOptions\n method, or as constructor arguments when directly\ninstantiating an adapter.\n\n\nAvailable Methods\n\n\nEach serializer implements the interface \nZend\\Serializer\\Adapter\\AdapterInterface\n.\n\n\nThis interface defines the following methods:\n\n\n\n\n\n\n\n\nMethod signature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nserialize(mixed $value) : string\n\n\nGenerates a storable representation of a value.\n\n\n\n\n\n\nunserialize(string $value) : mixed\n\n\nCreates a PHP value from a stored representation.\n\n\n\n\n\n\n\n\nThe base class \nZend\\Serializer\\Serializer\n is used to instantiate the\nadapters, to configure the factory, and as a proxy for serialization operations.\n\n\nIt defines the following static methods, where the following references map to\nclasses/interfaces as follows:\n\n\n\n\nAdapterPluginManager\n: \nZend\\Serializer\\AdapterPluginManager\n\n\nAdapterInterface\n: \nZend\\Serializer\\Adapter\\AdapterInterface\n\n\nAdapterOptions\n: \nZend\\Serializer\\Adapter\\AdapterOptions\n\n\n\n\n\n\n\n\n\n\nMethod signature\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfactory(/* ... */) : AdapterInterface\n\n\nCreate a serializer adapter instance. Arguments are: \nstring|AdapterInterface $adapterName, AdapterOptions|array|Traversable $adapterOptions = null\n.\n\n\n\n\n\n\nsetAdapterPluginManager(AdapterPluginManager $adapters) : void\n\n\nChange the adapter plugin manager.\n\n\n\n\n\n\ngetAdapterPluginManager() : AdapterPluginManager\n\n\nGet the adapter plugin manager.\n\n\n\n\n\n\nresetAdapterPluginManager() : void\n\n\nResets the internal adapter plugin manager.\n\n\n\n\n\n\nsetDefaultAdapter(string|AdapterInterface $adapter /* ... */) : void\n\n\nChange the default adapter. Full argument list: \nstring|AdapterInterface $adapter, AdapterOptions|array|Traversable $adapterOptions = null\n.\n\n\n\n\n\n\ngetDefaultAdapter() : AdapterInterface\n\n\nGet the default adapter.\n\n\n\n\n\n\nserialize(mixed $data /* ... */) : string\n\n\nGenerates a storable representation of a value using the default adapter. Optionally, provide a  different adapter via the second argument. Full argument list: \nmixed $value, string|AdapterInterface $adapter = null, AdapterOptions|array|Traversable $adapterOptions = null\n.\n\n\n\n\n\n\nunserialize(string $value /* ... */) : mixed\n\n\nCreates a PHP value from a stored representation using the default adapter. Optionally, provide a different adapter via the second argument. Full argument list: \nstring $value, string|AdapterInterface|null $adapter = null, AdapterOptions|array|Traversable $adapterOptions = null", 
            "title": "Intro"
        }, 
        {
            "location": "/intro/#introduction", 
            "text": "zend-serialzier provides an adapter-based interface for serializing and\ndeserializing PHP types to and from different representations.  For more information what a serializer is read the wikipedia page of Serialization .", 
            "title": "Introduction"
        }, 
        {
            "location": "/intro/#quick-start", 
            "text": "Serializing adapters can either be created from the provided Zend\\Serializer\\Serializer::factory  method, or by instantiating one of the Zend\\Serializer\\Adapter\\*  classes.  use Zend\\Serializer\\Adapter;\nuse Zend\\Serializer\\Exception;\nuse Zend\\Serializer\\Serializer;\n\n// Via factory:\n$serializer = Serializer::factory(Adapter\\PhpSerialize::class);\n\n// Alternately:\n$serializer = new Adapter\\PhpSerialize();\n\n// Now $serializer is an instance of Zend\\Serializer\\Adapter\\AdapterInterface,\n// specifically Zend\\Serializer\\Adapter\\PhpSerialize\n\ntry {\n    $serialized = $serializer- serialize($data);\n    // now $serialized is a string\n\n    $unserialized = $serializer- unserialize($serialized);\n    // now $data == $unserialized\n} catch (Exception\\ExceptionInterface $e) {\n    echo $e;\n}  The method  serialize()  generates a storable string. To regenerate this\nserialized data, call the method  unserialize() .  Any time an error is encountered serializing or unserializing, the adapter will\nthrow a  Zend\\Serializer\\Exception\\ExceptionInterface .  Because an application often uses only one serializer internally, it is possible\nto define and use a default serializer. That serializer will be used by default\nby other components like  Zend\\Cache\\Storage\\Plugin\\Serializer .  To define and use the default serializer, use the static serialization methods\nof the basic  Zend\\Serializer\\Serializer :  use Zend\\Serializer\\Adapter;\nuse Zend\\Serializer\\Exception;\nuse Zend\\Serializer\\Serializer;\n\nSerializer::setDefaultAdapter(Adapter\\PhpSerialize::class);\n\ntry {\n    $serialized = Serializer::serialize($data);\n    // now $serialized is a string\n\n    $unserialized = Serializer::unserialize($serialized);\n    // now $data == $unserialized\n} catch (Exception\\ExceptionInterface $e) {\n    echo $e;\n}", 
            "title": "Quick Start"
        }, 
        {
            "location": "/intro/#basic-configuration-options", 
            "text": "To configure a serializer adapter, you can optionally use an instance of Zend\\Serializer\\Adapter\\AdapterOptions , an instance of one of the adapter\nspecific options class, an  array , or a  Traversable  object. The adapter\nwill convert it into the adapter specific options class instance (if present) or\ninto the basic  Zend\\Serializer\\Adapter\\AdapterOptions  class instance.  Options can be passed as the second argument to the provided Zend\\Serializer\\Serializer::factory  and  ::setDefaultAdapter  methods, via the\nadapter's  setOptions  method, or as constructor arguments when directly\ninstantiating an adapter.", 
            "title": "Basic configuration Options"
        }, 
        {
            "location": "/intro/#available-methods", 
            "text": "Each serializer implements the interface  Zend\\Serializer\\Adapter\\AdapterInterface .  This interface defines the following methods:     Method signature  Description      serialize(mixed $value) : string  Generates a storable representation of a value.    unserialize(string $value) : mixed  Creates a PHP value from a stored representation.     The base class  Zend\\Serializer\\Serializer  is used to instantiate the\nadapters, to configure the factory, and as a proxy for serialization operations.  It defines the following static methods, where the following references map to\nclasses/interfaces as follows:   AdapterPluginManager :  Zend\\Serializer\\AdapterPluginManager  AdapterInterface :  Zend\\Serializer\\Adapter\\AdapterInterface  AdapterOptions :  Zend\\Serializer\\Adapter\\AdapterOptions      Method signature  Description      factory(/* ... */) : AdapterInterface  Create a serializer adapter instance. Arguments are:  string|AdapterInterface $adapterName, AdapterOptions|array|Traversable $adapterOptions = null .    setAdapterPluginManager(AdapterPluginManager $adapters) : void  Change the adapter plugin manager.    getAdapterPluginManager() : AdapterPluginManager  Get the adapter plugin manager.    resetAdapterPluginManager() : void  Resets the internal adapter plugin manager.    setDefaultAdapter(string|AdapterInterface $adapter /* ... */) : void  Change the default adapter. Full argument list:  string|AdapterInterface $adapter, AdapterOptions|array|Traversable $adapterOptions = null .    getDefaultAdapter() : AdapterInterface  Get the default adapter.    serialize(mixed $data /* ... */) : string  Generates a storable representation of a value using the default adapter. Optionally, provide a  different adapter via the second argument. Full argument list:  mixed $value, string|AdapterInterface $adapter = null, AdapterOptions|array|Traversable $adapterOptions = null .    unserialize(string $value /* ... */) : mixed  Creates a PHP value from a stored representation using the default adapter. Optionally, provide a different adapter via the second argument. Full argument list:  string $value, string|AdapterInterface|null $adapter = null, AdapterOptions|array|Traversable $adapterOptions = null", 
            "title": "Available Methods"
        }, 
        {
            "location": "/adapter/", 
            "text": "Adapters\n\n\nzend-serializer adapters handle serialization to and deserialization from\nspecific representations.\n\n\nEach adapter has its own strengths. In some cases, not every PHP datatype (e.g.,\nobjects) can be converted to a string representation. In most such cases, the\ntype will be converted to a similar type that is serializable.\n\n\nAs an example, PHP objects will often be cast to arrays. If this fails, a\n\nZend\\Serializer\\Exception\\ExceptionInterface\n will be thrown.\n\n\nThe PhpSerialize Adapter\n\n\nThe \nZend\\Serializer\\Adapter\\PhpSerialize\n adapter uses the built-in\n\nserialize()\n/\nunserialize()\n\nfunctions, and is a good default adapter choice.\n\n\nThere are no configurable options for this adapter.\n\n\nThe IgBinary Adapter\n\n\nIgbinary\n was originally released by\nSulake Dynamoid Oy and since 2011-03-14 moved to \nPECL\n and\nmaintained by Pierre Joye. It's a drop-in replacement for the standard PHP\nserializer. Instead of using a costly textual representation, igbinary stores\nPHP data structures in a compact binary form. Savings are significant when using\nmemcached or similar memory based storages for serialized data.\n\n\nYou need the igbinary PHP extension installed on your system in order to use\nthis adapter.\n\n\nThere are no configurable options for this adapter.\n\n\nThe Wddx Adapter\n\n\nWDDX\n (Web Distributed Data eXchange) is a\nprogramming-language-, platform-, and transport-neutral data interchange\nmechanism for passing data between different environments and different\ncomputers.\n\n\nThe adapter uses the \nwddx\n PHP functions. Please read the\nPHP manual to determine how you may enable them in your installation.\n\n\nAdditionally, the \nSimpleXML\n extension is used to\ncheck if a returned \nNULL\n value from \nwddx_unserialize()\n is based on a\nserialized \nNULL\n or on invalid data.\n\n\nAvailable options include:\n\n\n\n\n\n\n\n\nOption\n\n\nData Type\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncomment\n\n\nstring\n\n\n\n\nAn optional comment that appears in the packet header.\n\n\n\n\n\n\n\n\nThe Json Adapter\n\n\nThe \nJSON\n adapter provides a bridge to the\n\nzend-json\n component.\n\n\nAvailable options include:\n\n\n\n\n\n\n\n\nOption\n\n\nData Type\n\n\nDefault Value\n\n\n\n\n\n\n\n\n\n\ncycle_check\n\n\nboolean\n\n\nfalse\n\n\n\n\n\n\nobject_decode_type\n\n\nZend\\Json\\Json::TYPE_*\n\n\nZend\\Json\\Json::TYPE_ARRAY\n\n\n\n\n\n\nenable_json_expr_finder\n\n\nboolean\n\n\nfalse\n\n\n\n\n\n\n\n\nThe PythonPickle Adapter\n\n\nThis adapter converts PHP types to a \nPython Pickle\n\nstring representation. With it, you can read the serialized data with Python and\nread Pickled data from Python with PHP.\n\n\nThis adapter requires the \nzend-math\n component:\n\n\n$ composer require zendframework/zend-math\n\n\n\n\nAvailable options include:\n\n\n\n\n\n\n\n\nOption\n\n\nData Type\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nprotocol\n\n\ninteger\n (0/1/2/3)\n\n\n0\n\n\nThe Pickle protocol version used on serialize\n\n\n\n\n\n\n\n\nDatatype merging (PHP to Python Pickle)\n\n\n\n\n\n\n\n\nPHP Type\n\n\nPython Pickle Type\n\n\n\n\n\n\n\n\n\n\nNULL\n\n\nNone\n\n\n\n\n\n\nboolean\n\n\nboolean\n\n\n\n\n\n\ninteger\n\n\ninteger\n\n\n\n\n\n\nfloat\n\n\nfloat\n\n\n\n\n\n\nstring\n\n\nstring\n\n\n\n\n\n\narray\n list\n\n\nlist\n\n\n\n\n\n\narray\n map\n\n\ndictionary\n\n\n\n\n\n\nobject\n\n\ndictionary\n\n\n\n\n\n\n\n\nDatatype merging (Python Pickle to PHP)\n\n\n\n\n\n\n\n\nPython Pickle Type\n\n\nPHP Type\n\n\n\n\n\n\n\n\n\n\nNone\n\n\nNULL\n\n\n\n\n\n\nboolean\n\n\nboolean\n\n\n\n\n\n\ninteger\n\n\ninteger\n\n\n\n\n\n\nlong\n\n\ninteger\n, \nfloat\n, \nstring\n, or \nZend\\Serializer\\Exception\\ExceptionInterface\n\n\n\n\n\n\nfloat\n\n\nfloat\n\n\n\n\n\n\nstring\n\n\nstring\n\n\n\n\n\n\nbytes\n\n\nstring\n\n\n\n\n\n\nunicode string\n\n\nstring\n UTF-8\n\n\n\n\n\n\nlist\n\n\narray\n list\n\n\n\n\n\n\ntuple\n\n\narray\n list\n\n\n\n\n\n\ndictionary\n\n\narray\n map\n\n\n\n\n\n\nAll other types\n\n\nZend\\Serializer\\Exception\\ExceptionInterface\n\n\n\n\n\n\n\n\nThe PhpCode Adapter\n\n\nThe \nZend\\Serializer\\Adapter\\PhpCode\n adapter generates a parsable PHP code\nrepresentation using \nvar_export()\n. To restore,\nthe data will be executed using \neval\n.\n\n\nThere are no configuration options for this adapter.\n\n\n\n\nWarning: Unserializing objects\n\n\nObjects will be serialized using the\n\n__set_state\n magic\nmethod. If the class doesn't implement this method, a fatal error will occur\nduring execution.\n\n\nWarning: Uses eval()\n\n\nThe \nPhpCode\n adapter utilizes \neval()\n to unserialize. This introduces both a\nperformance and potential security issue as a new process will be executed.\nTypically, you should use the \nPhpSerialize\n adapter unless you require\nhuman-readability of the serialized data.", 
            "title": "Adapters"
        }, 
        {
            "location": "/adapter/#adapters", 
            "text": "zend-serializer adapters handle serialization to and deserialization from\nspecific representations.  Each adapter has its own strengths. In some cases, not every PHP datatype (e.g.,\nobjects) can be converted to a string representation. In most such cases, the\ntype will be converted to a similar type that is serializable.  As an example, PHP objects will often be cast to arrays. If this fails, a Zend\\Serializer\\Exception\\ExceptionInterface  will be thrown.", 
            "title": "Adapters"
        }, 
        {
            "location": "/adapter/#the-phpserialize-adapter", 
            "text": "The  Zend\\Serializer\\Adapter\\PhpSerialize  adapter uses the built-in serialize() / unserialize() \nfunctions, and is a good default adapter choice.  There are no configurable options for this adapter.", 
            "title": "The PhpSerialize Adapter"
        }, 
        {
            "location": "/adapter/#the-igbinary-adapter", 
            "text": "Igbinary  was originally released by\nSulake Dynamoid Oy and since 2011-03-14 moved to  PECL  and\nmaintained by Pierre Joye. It's a drop-in replacement for the standard PHP\nserializer. Instead of using a costly textual representation, igbinary stores\nPHP data structures in a compact binary form. Savings are significant when using\nmemcached or similar memory based storages for serialized data.  You need the igbinary PHP extension installed on your system in order to use\nthis adapter.  There are no configurable options for this adapter.", 
            "title": "The IgBinary Adapter"
        }, 
        {
            "location": "/adapter/#the-wddx-adapter", 
            "text": "WDDX  (Web Distributed Data eXchange) is a\nprogramming-language-, platform-, and transport-neutral data interchange\nmechanism for passing data between different environments and different\ncomputers.  The adapter uses the  wddx  PHP functions. Please read the\nPHP manual to determine how you may enable them in your installation.  Additionally, the  SimpleXML  extension is used to\ncheck if a returned  NULL  value from  wddx_unserialize()  is based on a\nserialized  NULL  or on invalid data.  Available options include:     Option  Data Type  Default Value  Description      comment  string   An optional comment that appears in the packet header.", 
            "title": "The Wddx Adapter"
        }, 
        {
            "location": "/adapter/#the-json-adapter", 
            "text": "The  JSON  adapter provides a bridge to the zend-json  component.  Available options include:     Option  Data Type  Default Value      cycle_check  boolean  false    object_decode_type  Zend\\Json\\Json::TYPE_*  Zend\\Json\\Json::TYPE_ARRAY    enable_json_expr_finder  boolean  false", 
            "title": "The Json Adapter"
        }, 
        {
            "location": "/adapter/#the-pythonpickle-adapter", 
            "text": "This adapter converts PHP types to a  Python Pickle \nstring representation. With it, you can read the serialized data with Python and\nread Pickled data from Python with PHP.  This adapter requires the  zend-math  component:  $ composer require zendframework/zend-math  Available options include:     Option  Data Type  Default Value  Description      protocol  integer  (0/1/2/3)  0  The Pickle protocol version used on serialize", 
            "title": "The PythonPickle Adapter"
        }, 
        {
            "location": "/adapter/#datatype-merging-php-to-python-pickle", 
            "text": "PHP Type  Python Pickle Type      NULL  None    boolean  boolean    integer  integer    float  float    string  string    array  list  list    array  map  dictionary    object  dictionary", 
            "title": "Datatype merging (PHP to Python Pickle)"
        }, 
        {
            "location": "/adapter/#datatype-merging-python-pickle-to-php", 
            "text": "Python Pickle Type  PHP Type      None  NULL    boolean  boolean    integer  integer    long  integer ,  float ,  string , or  Zend\\Serializer\\Exception\\ExceptionInterface    float  float    string  string    bytes  string    unicode string  string  UTF-8    list  array  list    tuple  array  list    dictionary  array  map    All other types  Zend\\Serializer\\Exception\\ExceptionInterface", 
            "title": "Datatype merging (Python Pickle to PHP)"
        }, 
        {
            "location": "/adapter/#the-phpcode-adapter", 
            "text": "The  Zend\\Serializer\\Adapter\\PhpCode  adapter generates a parsable PHP code\nrepresentation using  var_export() . To restore,\nthe data will be executed using  eval .  There are no configuration options for this adapter.", 
            "title": "The PhpCode Adapter"
        }, 
        {
            "location": "/adapter/#warning-unserializing-objects", 
            "text": "Objects will be serialized using the __set_state  magic\nmethod. If the class doesn't implement this method, a fatal error will occur\nduring execution.", 
            "title": "Warning: Unserializing objects"
        }, 
        {
            "location": "/adapter/#warning-uses-eval", 
            "text": "The  PhpCode  adapter utilizes  eval()  to unserialize. This introduces both a\nperformance and potential security issue as a new process will be executed.\nTypically, you should use the  PhpSerialize  adapter unless you require\nhuman-readability of the serialized data.", 
            "title": "Warning: Uses eval()"
        }
    ]
}